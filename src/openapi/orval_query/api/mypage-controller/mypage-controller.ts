/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * COMMERCE
 * COMMERCE REST API DOC
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  MemberModifyDto,
  MypageDetails200,
  MypageMyRecruitmentParams,
  PageRecruitmentListResponseDto,
  ProfileDto,
  SignUpDto
} from '../../model'
import { axiosInstance } from '../../../../utils/axiosInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const mypageProfile = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ProfileDto>(
      {url: `/api/mypage/profile`, method: 'GET', signal
    },
      options);
    }
  

export const getMypageProfileQueryKey = () => {
    return [`/api/mypage/profile`] as const;
    }

    
export const getMypageProfileInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof mypageProfile>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof mypageProfile>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMypageProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof mypageProfile>>> = ({ signal }) => mypageProfile(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof mypageProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type MypageProfileInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof mypageProfile>>>
export type MypageProfileInfiniteQueryError = unknown

export const useMypageProfileInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof mypageProfile>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof mypageProfile>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMypageProfileInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMypageProfileQueryOptions = <TData = Awaited<ReturnType<typeof mypageProfile>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mypageProfile>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMypageProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof mypageProfile>>> = ({ signal }) => mypageProfile(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof mypageProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type MypageProfileQueryResult = NonNullable<Awaited<ReturnType<typeof mypageProfile>>>
export type MypageProfileQueryError = unknown

export const useMypageProfile = <TData = Awaited<ReturnType<typeof mypageProfile>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mypageProfile>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMypageProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const mypageModifyProfile = (
    profileDto: ProfileDto,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<ProfileDto>(
      {url: `/api/mypage/profile`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: profileDto
    },
      options);
    }
  


export const getMypageModifyProfileMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mypageModifyProfile>>, TError,{data: ProfileDto}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof mypageModifyProfile>>, TError,{data: ProfileDto}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof mypageModifyProfile>>, {data: ProfileDto}> = (props) => {
          const {data} = props ?? {};

          return  mypageModifyProfile(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type MypageModifyProfileMutationResult = NonNullable<Awaited<ReturnType<typeof mypageModifyProfile>>>
    export type MypageModifyProfileMutationBody = ProfileDto
    export type MypageModifyProfileMutationError = unknown

    export const useMypageModifyProfile = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mypageModifyProfile>>, TError,{data: ProfileDto}, TContext>, request?: SecondParameter<typeof axiosInstance>}
) => {

      const mutationOptions = getMypageModifyProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const mypageDetails = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<MypageDetails200>(
      {url: `/api/mypage/modify`, method: 'GET', signal
    },
      options);
    }
  

export const getMypageDetailsQueryKey = () => {
    return [`/api/mypage/modify`] as const;
    }

    
export const getMypageDetailsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof mypageDetails>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof mypageDetails>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMypageDetailsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof mypageDetails>>> = ({ signal }) => mypageDetails(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof mypageDetails>>, TError, TData> & { queryKey: QueryKey }
}

export type MypageDetailsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof mypageDetails>>>
export type MypageDetailsInfiniteQueryError = unknown

export const useMypageDetailsInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof mypageDetails>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof mypageDetails>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMypageDetailsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMypageDetailsQueryOptions = <TData = Awaited<ReturnType<typeof mypageDetails>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mypageDetails>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMypageDetailsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof mypageDetails>>> = ({ signal }) => mypageDetails(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof mypageDetails>>, TError, TData> & { queryKey: QueryKey }
}

export type MypageDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof mypageDetails>>>
export type MypageDetailsQueryError = unknown

export const useMypageDetails = <TData = Awaited<ReturnType<typeof mypageDetails>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mypageDetails>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMypageDetailsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const mypageModifyDetails = (
    memberModifyDto: MemberModifyDto,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<SignUpDto>(
      {url: `/api/mypage/modify`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: memberModifyDto
    },
      options);
    }
  


export const getMypageModifyDetailsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mypageModifyDetails>>, TError,{data: MemberModifyDto}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof mypageModifyDetails>>, TError,{data: MemberModifyDto}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof mypageModifyDetails>>, {data: MemberModifyDto}> = (props) => {
          const {data} = props ?? {};

          return  mypageModifyDetails(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type MypageModifyDetailsMutationResult = NonNullable<Awaited<ReturnType<typeof mypageModifyDetails>>>
    export type MypageModifyDetailsMutationBody = MemberModifyDto
    export type MypageModifyDetailsMutationError = unknown

    export const useMypageModifyDetails = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mypageModifyDetails>>, TError,{data: MemberModifyDto}, TContext>, request?: SecondParameter<typeof axiosInstance>}
) => {

      const mutationOptions = getMypageModifyDetailsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const mypageMyRecruitment = (
    params: MypageMyRecruitmentParams,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<PageRecruitmentListResponseDto>(
      {url: `/api/mypage/myRecruitment`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getMypageMyRecruitmentQueryKey = (params: MypageMyRecruitmentParams,) => {
    return [`/api/mypage/myRecruitment`, ...(params ? [params]: [])] as const;
    }

    
export const getMypageMyRecruitmentInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof mypageMyRecruitment>>, MypageMyRecruitmentParams['page']>, TError = unknown>(params: MypageMyRecruitmentParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof mypageMyRecruitment>>, TError, TData, Awaited<ReturnType<typeof mypageMyRecruitment>>, QueryKey, MypageMyRecruitmentParams['page']>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMypageMyRecruitmentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof mypageMyRecruitment>>, QueryKey, MypageMyRecruitmentParams['page']> = ({ signal, pageParam }) => mypageMyRecruitment({...params, page: pageParam || params?.['page']}, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof mypageMyRecruitment>>, TError, TData, Awaited<ReturnType<typeof mypageMyRecruitment>>, QueryKey, MypageMyRecruitmentParams['page']> & { queryKey: QueryKey }
}

export type MypageMyRecruitmentInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof mypageMyRecruitment>>>
export type MypageMyRecruitmentInfiniteQueryError = unknown

export const useMypageMyRecruitmentInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof mypageMyRecruitment>>, MypageMyRecruitmentParams['page']>, TError = unknown>(
 params: MypageMyRecruitmentParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof mypageMyRecruitment>>, TError, TData, Awaited<ReturnType<typeof mypageMyRecruitment>>, QueryKey, MypageMyRecruitmentParams['page']>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMypageMyRecruitmentInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMypageMyRecruitmentQueryOptions = <TData = Awaited<ReturnType<typeof mypageMyRecruitment>>, TError = unknown>(params: MypageMyRecruitmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mypageMyRecruitment>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMypageMyRecruitmentQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof mypageMyRecruitment>>> = ({ signal }) => mypageMyRecruitment(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof mypageMyRecruitment>>, TError, TData> & { queryKey: QueryKey }
}

export type MypageMyRecruitmentQueryResult = NonNullable<Awaited<ReturnType<typeof mypageMyRecruitment>>>
export type MypageMyRecruitmentQueryError = unknown

export const useMypageMyRecruitment = <TData = Awaited<ReturnType<typeof mypageMyRecruitment>>, TError = unknown>(
 params: MypageMyRecruitmentParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof mypageMyRecruitment>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMypageMyRecruitmentQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



