/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * COMMERCE
 * COMMERCE REST API DOC
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  ApplicationCreateRequestDto,
  ApplicationCreateResponseDto,
  ApplicationListDto,
  ApplicationListResponseDto
} from '../../model'
import { axiosInstance } from '../../../../utils/axiosInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary ÏïΩÏÜç ÏÉùÏÑ±
 */
export const createApplication = (
    applicationCreateRequestDto: ApplicationCreateRequestDto,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<ApplicationCreateResponseDto>(
      {url: `/api/applications/create`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: applicationCreateRequestDto
    },
      options);
    }
  


export const getCreateApplicationMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createApplication>>, TError,{data: ApplicationCreateRequestDto}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createApplication>>, TError,{data: ApplicationCreateRequestDto}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createApplication>>, {data: ApplicationCreateRequestDto}> = (props) => {
          const {data} = props ?? {};

          return  createApplication(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type CreateApplicationMutationResult = NonNullable<Awaited<ReturnType<typeof createApplication>>>
    export type CreateApplicationMutationBody = ApplicationCreateRequestDto
    export type CreateApplicationMutationError = unknown

    /**
 * @summary ÏïΩÏÜç ÏÉùÏÑ±
 */
export const useCreateApplication = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createApplication>>, TError,{data: ApplicationCreateRequestDto}, TContext>, request?: SecondParameter<typeof axiosInstance>}
) => {

      const mutationOptions = getCreateApplicationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Î™®Ïßë Î™©Î°ù
 */
export const getAllApplications = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApplicationListDto[]>(
      {url: `/api/applications/list`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllApplicationsQueryKey = () => {
    return [`/api/applications/list`] as const;
    }

    
export const getGetAllApplicationsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getAllApplications>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllApplications>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllApplicationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllApplications>>> = ({ signal }) => getAllApplications(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllApplications>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllApplicationsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getAllApplications>>>
export type GetAllApplicationsInfiniteQueryError = unknown

/**
 * @summary Î™®Ïßë Î™©Î°ù
 */
export const useGetAllApplicationsInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof getAllApplications>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getAllApplications>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllApplicationsInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetAllApplicationsQueryOptions = <TData = Awaited<ReturnType<typeof getAllApplications>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllApplications>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllApplicationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllApplications>>> = ({ signal }) => getAllApplications(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllApplications>>, TError, TData> & { queryKey: QueryKey }
}

export type GetAllApplicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getAllApplications>>>
export type GetAllApplicationsQueryError = unknown

/**
 * @summary Î™®Ïßë Î™©Î°ù
 */
export const useGetAllApplications = <TData = Awaited<ReturnType<typeof getAllApplications>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllApplications>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetAllApplicationsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary ÏïΩÏÜç ÏÉÅÏÑ∏
 */
export const applicationDetails = (
    id: number,
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<ApplicationListResponseDto>(
      {url: `/api/applications/list/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getApplicationDetailsQueryKey = (id: number,) => {
    return [`/api/applications/list/${id}`] as const;
    }

    
export const getApplicationDetailsInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof applicationDetails>>>, TError = unknown>(id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof applicationDetails>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApplicationDetailsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof applicationDetails>>> = ({ signal }) => applicationDetails(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof applicationDetails>>, TError, TData> & { queryKey: QueryKey }
}

export type ApplicationDetailsInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof applicationDetails>>>
export type ApplicationDetailsInfiniteQueryError = unknown

/**
 * @summary ÏïΩÏÜç ÏÉÅÏÑ∏
 */
export const useApplicationDetailsInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof applicationDetails>>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof applicationDetails>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getApplicationDetailsInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApplicationDetailsQueryOptions = <TData = Awaited<ReturnType<typeof applicationDetails>>, TError = unknown>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof applicationDetails>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApplicationDetailsQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof applicationDetails>>> = ({ signal }) => applicationDetails(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof applicationDetails>>, TError, TData> & { queryKey: QueryKey }
}

export type ApplicationDetailsQueryResult = NonNullable<Awaited<ReturnType<typeof applicationDetails>>>
export type ApplicationDetailsQueryError = unknown

/**
 * @summary ÏïΩÏÜç ÏÉÅÏÑ∏
 */
export const useApplicationDetails = <TData = Awaited<ReturnType<typeof applicationDetails>>, TError = unknown>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof applicationDetails>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getApplicationDetailsQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



