/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * COMMERCE
 * COMMERCE REST API DOC
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  LogInDto,
  MemberDto,
  SignUpDto
} from '../../model'
import { axiosInstance } from '../../../../utils/axiosInstance';

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const test = (
    
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<string>(
      {url: `/api/members/test`, method: 'POST'
    },
      options);
    }
  


export const getTestMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof test>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof test>>, TError,void, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof test>>, void> = () => {
          

          return  test(requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type TestMutationResult = NonNullable<Awaited<ReturnType<typeof test>>>
    
    export type TestMutationError = unknown

    export const useTest = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof test>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
) => {

      const mutationOptions = getTestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const logOut = (
    
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<string>(
      {url: `/api/members/logout`, method: 'POST'
    },
      options);
    }
  


export const getLogOutMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logOut>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof logOut>>, TError,void, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logOut>>, void> = () => {
          

          return  logOut(requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type LogOutMutationResult = NonNullable<Awaited<ReturnType<typeof logOut>>>
    
    export type LogOutMutationError = unknown

    export const useLogOut = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logOut>>, TError,void, TContext>, request?: SecondParameter<typeof axiosInstance>}
) => {

      const mutationOptions = getLogOutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const logIn = (
    logInDto: LogInDto,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<string>(
      {url: `/api/members/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: logInDto
    },
      options);
    }
  


export const getLogInMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logIn>>, TError,{data: LogInDto}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof logIn>>, TError,{data: LogInDto}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logIn>>, {data: LogInDto}> = (props) => {
          const {data} = props ?? {};

          return  logIn(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type LogInMutationResult = NonNullable<Awaited<ReturnType<typeof logIn>>>
    export type LogInMutationBody = LogInDto
    export type LogInMutationError = unknown

    export const useLogIn = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logIn>>, TError,{data: LogInDto}, TContext>, request?: SecondParameter<typeof axiosInstance>}
) => {

      const mutationOptions = getLogInMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const signUp = (
    signUpDto: SignUpDto,
 options?: SecondParameter<typeof axiosInstance>,) => {
      
      
      return axiosInstance<MemberDto>(
      {url: `/api/members/join`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signUpDto
    },
      options);
    }
  


export const getSignUpMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: SignUpDto}, TContext>, request?: SecondParameter<typeof axiosInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: SignUpDto}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signUp>>, {data: SignUpDto}> = (props) => {
          const {data} = props ?? {};

          return  signUp(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type SignUpMutationResult = NonNullable<Awaited<ReturnType<typeof signUp>>>
    export type SignUpMutationBody = SignUpDto
    export type SignUpMutationError = unknown

    export const useSignUp = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signUp>>, TError,{data: SignUpDto}, TContext>, request?: SecondParameter<typeof axiosInstance>}
) => {

      const mutationOptions = getSignUpMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const memberInfo = (
    
 options?: SecondParameter<typeof axiosInstance>,signal?: AbortSignal
) => {
      
      
      return axiosInstance<MemberDto>(
      {url: `/api/members/info`, method: 'GET', signal
    },
      options);
    }
  

export const getMemberInfoQueryKey = () => {
    return [`/api/members/info`] as const;
    }

    
export const getMemberInfoInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof memberInfo>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberInfo>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMemberInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof memberInfo>>> = ({ signal }) => memberInfo(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberInfo>>, TError, TData> & { queryKey: QueryKey }
}

export type MemberInfoInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof memberInfo>>>
export type MemberInfoInfiniteQueryError = unknown

export const useMemberInfoInfinite = <TData = InfiniteData<Awaited<ReturnType<typeof memberInfo>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof memberInfo>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMemberInfoInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMemberInfoQueryOptions = <TData = Awaited<ReturnType<typeof memberInfo>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof memberInfo>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMemberInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof memberInfo>>> = ({ signal }) => memberInfo(requestOptions, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof memberInfo>>, TError, TData> & { queryKey: QueryKey }
}

export type MemberInfoQueryResult = NonNullable<Awaited<ReturnType<typeof memberInfo>>>
export type MemberInfoQueryError = unknown

export const useMemberInfo = <TData = Awaited<ReturnType<typeof memberInfo>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof memberInfo>>, TError, TData>>, request?: SecondParameter<typeof axiosInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getMemberInfoQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



